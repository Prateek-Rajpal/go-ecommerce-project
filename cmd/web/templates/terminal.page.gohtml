{{template "base" .}}

{{define "title"}}
Virtual Terminal
{{end}}

{{define "content"}}
<h2 class="mt-3 text-center">Virtual Terminal Application</h2>
<hr>
<div class="alert alert-danger text-center d-none" id="card-messages"></div>

<form action="/payment-succeeded" method="post"
    name="charge_form" id="charge_form" 
    class="d-block needs-validation charge-form" 
    autocomplete="off" novalidate=""> <!-- needs-validation in class is functionality of bootstrap class-->

    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <input type="text" class="form-control" id="amount" name="amount"
            required="" autocomplete="amount-new">
    </div>

    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Cardholder Name</label>
        <input type="text" class="form-control" id="cardholder-name" name="cardholder_name"
            required="" autocomplete="cardholder-name-new">
    </div>

    <div class="mb-3">
        <label for="cardholder-email" class="form-label">Cardholder Email</label>
        <input type="email" class="form-control" id="cardholder-email" name="cardholder_email"
            required="" autocomplete="cardholder-email-new">
    </div>
    <!--card number will be built by stripe -->
    <div class="mb-3">
        <label for="card-element" class="form-label">Credit Card</label>
        <div id="card-element" class="form-control"></div>
        <div class="alert-danger text-center" id="card-errors" role="alert"></div>
        <div class="alert-success text-center" id="card-success" role="alert"></div>
    </div>
    
    <hr>

    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a> 
    <div id="processing-payment" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

</form>

{{end}}

{{ define "js"}}
    <script src="https://js.stripe.com/v3/"></script>

    <script>
    let card;
    let stripe;

    // for client side validation to check fields enter by clients are correct or not
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    // for show processing loader when someone clicks on charge card
    const processing = document.getElementById("processing-payment");    
    stripe = Stripe('your-stripe-publishable-key');
    
    // validating client side in form
    function val(){

        let form = document.getElementById("charge_form")
        if (form.checkValidity() === false) { //checks if the form element has failed its built-in HTML5 validation
            this.event.preventDefault(); // prevents the default form submission behavior (e.g., reloading the page).
            this.event.stopPropagation(); // stops the event from bubbling up to parent elements, potentially preventing unintended validation effects on other forms.
            form.classList.add("was-validated") // adds a CSS class (presumably named "was-validated") to the form element. This class could be used to style the form differently after validation has been attempted (e.g., highlighting errors).
            return;
        }
        form.classList.add("was-validated")
    }
    // anonymous function to use stripe and card variable we created above
    (function() {
       //create stripe & elements 
       const elements = stripe.elements();

       // adding styling
       const style = {
            base: {
                fontSize: "16px",
                lineHeight: "24px"
            }
       };

       // create card entry
       card = elements.create('card', {
            style: style,
            hidePostalCode: true,
       });
       //mounting card variable to div
       card.mount("#card-element")

       // check for input errors
       card.addEventListener('change', function(event) {
        var displayError = document.getElementById("card-errors"); // this id we defined above in card-element label
        if (event.error) {
            displayError.classList.remove('d-none');
            displayError.textContent = event.error.message;
        } else {
            displayError.classList.add('d-none');
            displayError.textContent = '';
        }
       });
    })();
    </script>
{{end}}