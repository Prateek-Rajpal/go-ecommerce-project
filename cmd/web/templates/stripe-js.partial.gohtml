{{define "stripe-js"}}
<!--using stripe sdk-->
<script src="https://js.stripe.com/v3/"></script> 

<script>
    let card;
    let stripe;

    // for client side validation to check fields enter by clients are correct or not
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    // for show processing loader when someone clicks on charge card
    const processing = document.getElementById("processing-payment");    
    stripe = Stripe("{{index .StringMap "publishable_key"}}"); // create an instance of the Stripe object. The Stripe object is our entrypoint to the rest of the Stripe.js SDK.
    
    function hidePayButton(){
        payButton.classList.add("d-none") // hiding pay-button so that user don't click on it twice to charge the credit card
        processing.classList.remove("d-none") 
    }

    function showPayButtons() {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none");
    }

    function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg;
    }

    function showCardSuccess() {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successfull";
    }
    // validating client side in form
    function val(){

        let form = document.getElementById("charge_form")
        if (form.checkValidity() === false) { //checks if the form element has failed its built-in HTML5 validation
            this.event.preventDefault(); // prevents the default form submission behavior (e.g., reloading the page).
            this.event.stopPropagation(); // stops the event from bubbling up to parent elements, potentially preventing unintended validation effects on other forms.
            form.classList.add("was-validated") // adds a CSS class (presumably named "was-validated") to the form element. This class could be used to style the form differently after validation has been attempted (e.g., highlighting errors).
            return;
        }
        form.classList.add("was-validated")
        hidePayButton()

        let amountToCharge = String(parseFloat(document.getElementById("amount").value)*100)

        let payload = {amount: amountToCharge, currency: "inr"}

        const requestOptions = {
            method: "post",
            headers: {
                'Accept' : "application/json",
                'Content-Type': "application/json"
            },
            body : JSON.stringify(payload),
        }
        fetch("{{.API}}/api/payment-intent", requestOptions)
            .then(response => response.text()) // get response and convert that to text 
            .then(response => {
                let data ;
                try {
                    data = JSON.parse(response);
                    //console.log(data);
                    // confirm payment 
                    stripe.confirmCardPayment(data.client_secret,{
                        payment_method: {
                        card: card,
                        billing_details: {
                            name: document.getElementById("cardholder-name").value,
                        },
                      },
                    }).then(function(result){
                        if (result.error) {
                            // card declined, or something went wrong with the card
                            showCardError(result.error.message); // get error message from stripe
                            showPayButtons();
                        }else if(result.paymentIntent){
                            if (result.paymentIntent.status == "succeeded") {
                            // we have charged the card
                            document.getElementById("payment_method").value = result.paymentIntent.payment_method_types[0];
                            document.getElementById("payment_intent").value = result.paymentIntent.id;
                            document.getElementById("payment_amount").value = result.paymentIntent.amount;
                            document.getElementById("payment_currency").value = result.paymentIntent.currency;
                            processing.classList.add("d-none");
                            showCardSuccess();
                            // submit the form to generate receipt
                            document.getElementById("charge_form").submit();
                            }
                        }
                    })
                }catch(err) {
                    showCardError("Invalid response from payment gateway!");
                    showPayButtons();
                }
            })
    }
    // anonymous function to use stripe and card variable we created above
    (function() {
       //create stripe & elements 
       const elements = stripe.elements();

       // adding styling
       const style = {
            base: {
                fontSize: "16px",
                lineHeight: "24px"
            }
       };

       // create card entry
       card = elements.create('card', {
            style: style,
            hidePostalCode: true,
       });
       //mounting card variable to div
       card.mount("#card-element")

       // check for input errors
       card.addEventListener('change', function(event) {
        var displayError = document.getElementById("card-errors"); // this id we defined above in card-element label
        if (event.error) {
            displayError.classList.remove('d-none');
            displayError.textContent = event.error.message;
        } else {
            displayError.classList.add('d-none');
            displayError.textContent = '';
        }
       });
    })();
</script>
{{end}}